// Code generated by mockery v2.53.3. DO NOT EDIT.

package controllers

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// MockAlternativeFQDNRedirector is an autogenerated mock type for the AlternativeFQDNRedirector type
type MockAlternativeFQDNRedirector struct {
	mock.Mock
}

type MockAlternativeFQDNRedirector_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAlternativeFQDNRedirector) EXPECT() *MockAlternativeFQDNRedirector_Expecter {
	return &MockAlternativeFQDNRedirector_Expecter{mock: &_m.Mock}
}

// RedirectAlternativeFQDN provides a mock function with given fields: ctx, namespace, redirectObjectName, fqdn, altFQDNMap, setOwner
func (_m *MockAlternativeFQDNRedirector) RedirectAlternativeFQDN(ctx context.Context, namespace string, redirectObjectName string, fqdn string, altFQDNMap map[string][]string, setOwner func(v1.Object) error) error {
	ret := _m.Called(ctx, namespace, redirectObjectName, fqdn, altFQDNMap, setOwner)

	if len(ret) == 0 {
		panic("no return value specified for RedirectAlternativeFQDN")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, map[string][]string, func(v1.Object) error) error); ok {
		r0 = rf(ctx, namespace, redirectObjectName, fqdn, altFQDNMap, setOwner)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAlternativeFQDNRedirector_RedirectAlternativeFQDN_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RedirectAlternativeFQDN'
type MockAlternativeFQDNRedirector_RedirectAlternativeFQDN_Call struct {
	*mock.Call
}

// RedirectAlternativeFQDN is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - redirectObjectName string
//   - fqdn string
//   - altFQDNMap map[string][]string
//   - setOwner func(v1.Object) error
func (_e *MockAlternativeFQDNRedirector_Expecter) RedirectAlternativeFQDN(ctx interface{}, namespace interface{}, redirectObjectName interface{}, fqdn interface{}, altFQDNMap interface{}, setOwner interface{}) *MockAlternativeFQDNRedirector_RedirectAlternativeFQDN_Call {
	return &MockAlternativeFQDNRedirector_RedirectAlternativeFQDN_Call{Call: _e.mock.On("RedirectAlternativeFQDN", ctx, namespace, redirectObjectName, fqdn, altFQDNMap, setOwner)}
}

func (_c *MockAlternativeFQDNRedirector_RedirectAlternativeFQDN_Call) Run(run func(ctx context.Context, namespace string, redirectObjectName string, fqdn string, altFQDNMap map[string][]string, setOwner func(v1.Object) error)) *MockAlternativeFQDNRedirector_RedirectAlternativeFQDN_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(map[string][]string), args[5].(func(v1.Object) error))
	})
	return _c
}

func (_c *MockAlternativeFQDNRedirector_RedirectAlternativeFQDN_Call) Return(_a0 error) *MockAlternativeFQDNRedirector_RedirectAlternativeFQDN_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAlternativeFQDNRedirector_RedirectAlternativeFQDN_Call) RunAndReturn(run func(context.Context, string, string, string, map[string][]string, func(v1.Object) error) error) *MockAlternativeFQDNRedirector_RedirectAlternativeFQDN_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAlternativeFQDNRedirector creates a new instance of MockAlternativeFQDNRedirector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAlternativeFQDNRedirector(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAlternativeFQDNRedirector {
	mock := &MockAlternativeFQDNRedirector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
