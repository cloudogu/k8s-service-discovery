// Code generated by mockery v2.20.0. DO NOT EDIT.

package controllers

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	v1 "k8s.io/api/core/v1"
)

// MockNetworkPolicyUpdater is an autogenerated mock type for the NetworkPolicyUpdater type
type MockNetworkPolicyUpdater struct {
	mock.Mock
}

type MockNetworkPolicyUpdater_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNetworkPolicyUpdater) EXPECT() *MockNetworkPolicyUpdater_Expecter {
	return &MockNetworkPolicyUpdater_Expecter{mock: &_m.Mock}
}

// RemoveExposedPorts provides a mock function with given fields: ctx, serviceName
func (_m *MockNetworkPolicyUpdater) RemoveExposedPorts(ctx context.Context, serviceName string) error {
	ret := _m.Called(ctx, serviceName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, serviceName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNetworkPolicyUpdater_RemoveExposedPorts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveExposedPorts'
type MockNetworkPolicyUpdater_RemoveExposedPorts_Call struct {
	*mock.Call
}

// RemoveExposedPorts is a helper method to define mock.On call
//   - ctx context.Context
//   - serviceName string
func (_e *MockNetworkPolicyUpdater_Expecter) RemoveExposedPorts(ctx interface{}, serviceName interface{}) *MockNetworkPolicyUpdater_RemoveExposedPorts_Call {
	return &MockNetworkPolicyUpdater_RemoveExposedPorts_Call{Call: _e.mock.On("RemoveExposedPorts", ctx, serviceName)}
}

func (_c *MockNetworkPolicyUpdater_RemoveExposedPorts_Call) Run(run func(ctx context.Context, serviceName string)) *MockNetworkPolicyUpdater_RemoveExposedPorts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockNetworkPolicyUpdater_RemoveExposedPorts_Call) Return(_a0 error) *MockNetworkPolicyUpdater_RemoveExposedPorts_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNetworkPolicyUpdater_RemoveExposedPorts_Call) RunAndReturn(run func(context.Context, string) error) *MockNetworkPolicyUpdater_RemoveExposedPorts_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveNetworkPolicy provides a mock function with given fields: ctx
func (_m *MockNetworkPolicyUpdater) RemoveNetworkPolicy(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNetworkPolicyUpdater_RemoveNetworkPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveNetworkPolicy'
type MockNetworkPolicyUpdater_RemoveNetworkPolicy_Call struct {
	*mock.Call
}

// RemoveNetworkPolicy is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockNetworkPolicyUpdater_Expecter) RemoveNetworkPolicy(ctx interface{}) *MockNetworkPolicyUpdater_RemoveNetworkPolicy_Call {
	return &MockNetworkPolicyUpdater_RemoveNetworkPolicy_Call{Call: _e.mock.On("RemoveNetworkPolicy", ctx)}
}

func (_c *MockNetworkPolicyUpdater_RemoveNetworkPolicy_Call) Run(run func(ctx context.Context)) *MockNetworkPolicyUpdater_RemoveNetworkPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockNetworkPolicyUpdater_RemoveNetworkPolicy_Call) Return(_a0 error) *MockNetworkPolicyUpdater_RemoveNetworkPolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNetworkPolicyUpdater_RemoveNetworkPolicy_Call) RunAndReturn(run func(context.Context) error) *MockNetworkPolicyUpdater_RemoveNetworkPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertNetworkPoliciesForService provides a mock function with given fields: ctx, service
func (_m *MockNetworkPolicyUpdater) UpsertNetworkPoliciesForService(ctx context.Context, service *v1.Service) error {
	ret := _m.Called(ctx, service)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Service) error); ok {
		r0 = rf(ctx, service)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNetworkPolicyUpdater_UpsertNetworkPoliciesForService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertNetworkPoliciesForService'
type MockNetworkPolicyUpdater_UpsertNetworkPoliciesForService_Call struct {
	*mock.Call
}

// UpsertNetworkPoliciesForService is a helper method to define mock.On call
//   - ctx context.Context
//   - service *v1.Service
func (_e *MockNetworkPolicyUpdater_Expecter) UpsertNetworkPoliciesForService(ctx interface{}, service interface{}) *MockNetworkPolicyUpdater_UpsertNetworkPoliciesForService_Call {
	return &MockNetworkPolicyUpdater_UpsertNetworkPoliciesForService_Call{Call: _e.mock.On("UpsertNetworkPoliciesForService", ctx, service)}
}

func (_c *MockNetworkPolicyUpdater_UpsertNetworkPoliciesForService_Call) Run(run func(ctx context.Context, service *v1.Service)) *MockNetworkPolicyUpdater_UpsertNetworkPoliciesForService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.Service))
	})
	return _c
}

func (_c *MockNetworkPolicyUpdater_UpsertNetworkPoliciesForService_Call) Return(_a0 error) *MockNetworkPolicyUpdater_UpsertNetworkPoliciesForService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNetworkPolicyUpdater_UpsertNetworkPoliciesForService_Call) RunAndReturn(run func(context.Context, *v1.Service) error) *MockNetworkPolicyUpdater_UpsertNetworkPoliciesForService_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockNetworkPolicyUpdater interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockNetworkPolicyUpdater creates a new instance of MockNetworkPolicyUpdater. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockNetworkPolicyUpdater(t mockConstructorTestingTNewMockNetworkPolicyUpdater) *MockNetworkPolicyUpdater {
	mock := &MockNetworkPolicyUpdater{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
