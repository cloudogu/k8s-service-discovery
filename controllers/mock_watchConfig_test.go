// Code generated by mockery v2.20.0. DO NOT EDIT.

package controllers

import (
	context "context"

	client "go.etcd.io/etcd/client/v2"

	mock "github.com/stretchr/testify/mock"
)

// mockWatchConfig is an autogenerated mock type for the watchConfig type
type mockWatchConfig struct {
	mock.Mock
}

type mockWatchConfig_Expecter struct {
	mock *mock.Mock
}

func (_m *mockWatchConfig) EXPECT() *mockWatchConfig_Expecter {
	return &mockWatchConfig_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: key
func (_m *mockWatchConfig) Get(key string) (string, error) {
	ret := _m.Called(key)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockWatchConfig_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type mockWatchConfig_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key string
func (_e *mockWatchConfig_Expecter) Get(key interface{}) *mockWatchConfig_Get_Call {
	return &mockWatchConfig_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *mockWatchConfig_Get_Call) Run(run func(key string)) *mockWatchConfig_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockWatchConfig_Get_Call) Return(_a0 string, _a1 error) *mockWatchConfig_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockWatchConfig_Get_Call) RunAndReturn(run func(string) (string, error)) *mockWatchConfig_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetChildrenPaths provides a mock function with given fields: key
func (_m *mockWatchConfig) GetChildrenPaths(key string) ([]string, error) {
	ret := _m.Called(key)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockWatchConfig_GetChildrenPaths_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChildrenPaths'
type mockWatchConfig_GetChildrenPaths_Call struct {
	*mock.Call
}

// GetChildrenPaths is a helper method to define mock.On call
//   - key string
func (_e *mockWatchConfig_Expecter) GetChildrenPaths(key interface{}) *mockWatchConfig_GetChildrenPaths_Call {
	return &mockWatchConfig_GetChildrenPaths_Call{Call: _e.mock.On("GetChildrenPaths", key)}
}

func (_c *mockWatchConfig_GetChildrenPaths_Call) Run(run func(key string)) *mockWatchConfig_GetChildrenPaths_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockWatchConfig_GetChildrenPaths_Call) Return(_a0 []string, _a1 error) *mockWatchConfig_GetChildrenPaths_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockWatchConfig_GetChildrenPaths_Call) RunAndReturn(run func(string) ([]string, error)) *mockWatchConfig_GetChildrenPaths_Call {
	_c.Call.Return(run)
	return _c
}

// Watch provides a mock function with given fields: ctx, key, recursive, eventChannel
func (_m *mockWatchConfig) Watch(ctx context.Context, key string, recursive bool, eventChannel chan *client.Response) {
	_m.Called(ctx, key, recursive, eventChannel)
}

// mockWatchConfig_Watch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Watch'
type mockWatchConfig_Watch_Call struct {
	*mock.Call
}

// Watch is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - recursive bool
//   - eventChannel chan *client.Response
func (_e *mockWatchConfig_Expecter) Watch(ctx interface{}, key interface{}, recursive interface{}, eventChannel interface{}) *mockWatchConfig_Watch_Call {
	return &mockWatchConfig_Watch_Call{Call: _e.mock.On("Watch", ctx, key, recursive, eventChannel)}
}

func (_c *mockWatchConfig_Watch_Call) Run(run func(ctx context.Context, key string, recursive bool, eventChannel chan *client.Response)) *mockWatchConfig_Watch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(bool), args[3].(chan *client.Response))
	})
	return _c
}

func (_c *mockWatchConfig_Watch_Call) Return() *mockWatchConfig_Watch_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockWatchConfig_Watch_Call) RunAndReturn(run func(context.Context, string, bool, chan *client.Response)) *mockWatchConfig_Watch_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTnewMockWatchConfig interface {
	mock.TestingT
	Cleanup(func())
}

// newMockWatchConfig creates a new instance of mockWatchConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockWatchConfig(t mockConstructorTestingTnewMockWatchConfig) *mockWatchConfig {
	mock := &mockWatchConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
