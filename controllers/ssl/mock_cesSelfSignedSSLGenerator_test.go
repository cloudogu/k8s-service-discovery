// Code generated by mockery v2.52.4. DO NOT EDIT.

package ssl

import mock "github.com/stretchr/testify/mock"

// mockCesSelfSignedSSLGenerator is an autogenerated mock type for the cesSelfSignedSSLGenerator type
type mockCesSelfSignedSSLGenerator struct {
	mock.Mock
}

type mockCesSelfSignedSSLGenerator_Expecter struct {
	mock *mock.Mock
}

func (_m *mockCesSelfSignedSSLGenerator) EXPECT() *mockCesSelfSignedSSLGenerator_Expecter {
	return &mockCesSelfSignedSSLGenerator_Expecter{mock: &_m.Mock}
}

// GenerateSelfSignedCert provides a mock function with given fields: fqdn, domain, certExpireDays, country, province, locality, altDNSNames
func (_m *mockCesSelfSignedSSLGenerator) GenerateSelfSignedCert(fqdn string, domain string, certExpireDays int, country string, province string, locality string, altDNSNames []string) (string, string, error) {
	ret := _m.Called(fqdn, domain, certExpireDays, country, province, locality, altDNSNames)

	if len(ret) == 0 {
		panic("no return value specified for GenerateSelfSignedCert")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string, int, string, string, string, []string) (string, string, error)); ok {
		return rf(fqdn, domain, certExpireDays, country, province, locality, altDNSNames)
	}
	if rf, ok := ret.Get(0).(func(string, string, int, string, string, string, []string) string); ok {
		r0 = rf(fqdn, domain, certExpireDays, country, province, locality, altDNSNames)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, int, string, string, string, []string) string); ok {
		r1 = rf(fqdn, domain, certExpireDays, country, province, locality, altDNSNames)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, string, int, string, string, string, []string) error); ok {
		r2 = rf(fqdn, domain, certExpireDays, country, province, locality, altDNSNames)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// mockCesSelfSignedSSLGenerator_GenerateSelfSignedCert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateSelfSignedCert'
type mockCesSelfSignedSSLGenerator_GenerateSelfSignedCert_Call struct {
	*mock.Call
}

// GenerateSelfSignedCert is a helper method to define mock.On call
//   - fqdn string
//   - domain string
//   - certExpireDays int
//   - country string
//   - province string
//   - locality string
//   - altDNSNames []string
func (_e *mockCesSelfSignedSSLGenerator_Expecter) GenerateSelfSignedCert(fqdn interface{}, domain interface{}, certExpireDays interface{}, country interface{}, province interface{}, locality interface{}, altDNSNames interface{}) *mockCesSelfSignedSSLGenerator_GenerateSelfSignedCert_Call {
	return &mockCesSelfSignedSSLGenerator_GenerateSelfSignedCert_Call{Call: _e.mock.On("GenerateSelfSignedCert", fqdn, domain, certExpireDays, country, province, locality, altDNSNames)}
}

func (_c *mockCesSelfSignedSSLGenerator_GenerateSelfSignedCert_Call) Run(run func(fqdn string, domain string, certExpireDays int, country string, province string, locality string, altDNSNames []string)) *mockCesSelfSignedSSLGenerator_GenerateSelfSignedCert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(int), args[3].(string), args[4].(string), args[5].(string), args[6].([]string))
	})
	return _c
}

func (_c *mockCesSelfSignedSSLGenerator_GenerateSelfSignedCert_Call) Return(_a0 string, _a1 string, _a2 error) *mockCesSelfSignedSSLGenerator_GenerateSelfSignedCert_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *mockCesSelfSignedSSLGenerator_GenerateSelfSignedCert_Call) RunAndReturn(run func(string, string, int, string, string, string, []string) (string, string, error)) *mockCesSelfSignedSSLGenerator_GenerateSelfSignedCert_Call {
	_c.Call.Return(run)
	return _c
}

// newMockCesSelfSignedSSLGenerator creates a new instance of mockCesSelfSignedSSLGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockCesSelfSignedSSLGenerator(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockCesSelfSignedSSLGenerator {
	mock := &mockCesSelfSignedSSLGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
