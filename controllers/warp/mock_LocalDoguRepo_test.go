// Code generated by mockery v2.52.4. DO NOT EDIT.

package warp

import (
	context "context"

	dogu "github.com/cloudogu/ces-commons-lib/dogu"
	core "github.com/cloudogu/cesapp-lib/core"

	mock "github.com/stretchr/testify/mock"
)

// MockLocalDoguRepo is an autogenerated mock type for the LocalDoguRepo type
type MockLocalDoguRepo struct {
	mock.Mock
}

type MockLocalDoguRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLocalDoguRepo) EXPECT() *MockLocalDoguRepo_Expecter {
	return &MockLocalDoguRepo_Expecter{mock: &_m.Mock}
}

// GetAll provides a mock function with given fields: _a0, _a1
func (_m *MockLocalDoguRepo) GetAll(_a0 context.Context, _a1 []dogu.SimpleNameVersion) (map[dogu.SimpleNameVersion]*core.Dogu, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 map[dogu.SimpleNameVersion]*core.Dogu
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []dogu.SimpleNameVersion) (map[dogu.SimpleNameVersion]*core.Dogu, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []dogu.SimpleNameVersion) map[dogu.SimpleNameVersion]*core.Dogu); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[dogu.SimpleNameVersion]*core.Dogu)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []dogu.SimpleNameVersion) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLocalDoguRepo_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockLocalDoguRepo_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 []dogu.SimpleNameVersion
func (_e *MockLocalDoguRepo_Expecter) GetAll(_a0 interface{}, _a1 interface{}) *MockLocalDoguRepo_GetAll_Call {
	return &MockLocalDoguRepo_GetAll_Call{Call: _e.mock.On("GetAll", _a0, _a1)}
}

func (_c *MockLocalDoguRepo_GetAll_Call) Run(run func(_a0 context.Context, _a1 []dogu.SimpleNameVersion)) *MockLocalDoguRepo_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]dogu.SimpleNameVersion))
	})
	return _c
}

func (_c *MockLocalDoguRepo_GetAll_Call) Return(_a0 map[dogu.SimpleNameVersion]*core.Dogu, _a1 error) *MockLocalDoguRepo_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLocalDoguRepo_GetAll_Call) RunAndReturn(run func(context.Context, []dogu.SimpleNameVersion) (map[dogu.SimpleNameVersion]*core.Dogu, error)) *MockLocalDoguRepo_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLocalDoguRepo creates a new instance of MockLocalDoguRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLocalDoguRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLocalDoguRepo {
	mock := &MockLocalDoguRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
