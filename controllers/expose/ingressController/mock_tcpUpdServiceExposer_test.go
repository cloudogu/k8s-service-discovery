// Code generated by mockery v2.53.3. DO NOT EDIT.

package ingressController

import (
	context "context"

	util "github.com/cloudogu/k8s-service-discovery/v2/controllers/util"
	mock "github.com/stretchr/testify/mock"
)

// mockTcpUpdServiceExposer is an autogenerated mock type for the tcpUpdServiceExposer type
type mockTcpUpdServiceExposer struct {
	mock.Mock
}

type mockTcpUpdServiceExposer_Expecter struct {
	mock *mock.Mock
}

func (_m *mockTcpUpdServiceExposer) EXPECT() *mockTcpUpdServiceExposer_Expecter {
	return &mockTcpUpdServiceExposer_Expecter{mock: &_m.Mock}
}

// DeleteExposedPorts provides a mock function with given fields: ctx, namespace, targetServiceName
func (_m *mockTcpUpdServiceExposer) DeleteExposedPorts(ctx context.Context, namespace string, targetServiceName string) error {
	ret := _m.Called(ctx, namespace, targetServiceName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteExposedPorts")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, namespace, targetServiceName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockTcpUpdServiceExposer_DeleteExposedPorts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteExposedPorts'
type mockTcpUpdServiceExposer_DeleteExposedPorts_Call struct {
	*mock.Call
}

// DeleteExposedPorts is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - targetServiceName string
func (_e *mockTcpUpdServiceExposer_Expecter) DeleteExposedPorts(ctx interface{}, namespace interface{}, targetServiceName interface{}) *mockTcpUpdServiceExposer_DeleteExposedPorts_Call {
	return &mockTcpUpdServiceExposer_DeleteExposedPorts_Call{Call: _e.mock.On("DeleteExposedPorts", ctx, namespace, targetServiceName)}
}

func (_c *mockTcpUpdServiceExposer_DeleteExposedPorts_Call) Run(run func(ctx context.Context, namespace string, targetServiceName string)) *mockTcpUpdServiceExposer_DeleteExposedPorts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *mockTcpUpdServiceExposer_DeleteExposedPorts_Call) Return(_a0 error) *mockTcpUpdServiceExposer_DeleteExposedPorts_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockTcpUpdServiceExposer_DeleteExposedPorts_Call) RunAndReturn(run func(context.Context, string, string) error) *mockTcpUpdServiceExposer_DeleteExposedPorts_Call {
	_c.Call.Return(run)
	return _c
}

// ExposeOrUpdateExposedPorts provides a mock function with given fields: ctx, namespace, targetServiceName, exposedPorts
func (_m *mockTcpUpdServiceExposer) ExposeOrUpdateExposedPorts(ctx context.Context, namespace string, targetServiceName string, exposedPorts util.ExposedPorts) error {
	ret := _m.Called(ctx, namespace, targetServiceName, exposedPorts)

	if len(ret) == 0 {
		panic("no return value specified for ExposeOrUpdateExposedPorts")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, util.ExposedPorts) error); ok {
		r0 = rf(ctx, namespace, targetServiceName, exposedPorts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockTcpUpdServiceExposer_ExposeOrUpdateExposedPorts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExposeOrUpdateExposedPorts'
type mockTcpUpdServiceExposer_ExposeOrUpdateExposedPorts_Call struct {
	*mock.Call
}

// ExposeOrUpdateExposedPorts is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - targetServiceName string
//   - exposedPorts util.ExposedPorts
func (_e *mockTcpUpdServiceExposer_Expecter) ExposeOrUpdateExposedPorts(ctx interface{}, namespace interface{}, targetServiceName interface{}, exposedPorts interface{}) *mockTcpUpdServiceExposer_ExposeOrUpdateExposedPorts_Call {
	return &mockTcpUpdServiceExposer_ExposeOrUpdateExposedPorts_Call{Call: _e.mock.On("ExposeOrUpdateExposedPorts", ctx, namespace, targetServiceName, exposedPorts)}
}

func (_c *mockTcpUpdServiceExposer_ExposeOrUpdateExposedPorts_Call) Run(run func(ctx context.Context, namespace string, targetServiceName string, exposedPorts util.ExposedPorts)) *mockTcpUpdServiceExposer_ExposeOrUpdateExposedPorts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(util.ExposedPorts))
	})
	return _c
}

func (_c *mockTcpUpdServiceExposer_ExposeOrUpdateExposedPorts_Call) Return(_a0 error) *mockTcpUpdServiceExposer_ExposeOrUpdateExposedPorts_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockTcpUpdServiceExposer_ExposeOrUpdateExposedPorts_Call) RunAndReturn(run func(context.Context, string, string, util.ExposedPorts) error) *mockTcpUpdServiceExposer_ExposeOrUpdateExposedPorts_Call {
	_c.Call.Return(run)
	return _c
}

// newMockTcpUpdServiceExposer creates a new instance of mockTcpUpdServiceExposer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockTcpUpdServiceExposer(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockTcpUpdServiceExposer {
	mock := &mockTcpUpdServiceExposer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
