// Code generated by mockery v2.44.1. DO NOT EDIT.

package ssl

import mock "github.com/stretchr/testify/mock"

// mockSetConfigurationContext is an autogenerated mock type for the setConfigurationContext type
type mockSetConfigurationContext struct {
	mock.Mock
}

type mockSetConfigurationContext_Expecter struct {
	mock *mock.Mock
}

func (_m *mockSetConfigurationContext) EXPECT() *mockSetConfigurationContext_Expecter {
	return &mockSetConfigurationContext_Expecter{mock: &_m.Mock}
}

// Set provides a mock function with given fields: key, value
func (_m *mockSetConfigurationContext) Set(key string, value string) error {
	ret := _m.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockSetConfigurationContext_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type mockSetConfigurationContext_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - key string
//   - value string
func (_e *mockSetConfigurationContext_Expecter) Set(key interface{}, value interface{}) *mockSetConfigurationContext_Set_Call {
	return &mockSetConfigurationContext_Set_Call{Call: _e.mock.On("Set", key, value)}
}

func (_c *mockSetConfigurationContext_Set_Call) Run(run func(key string, value string)) *mockSetConfigurationContext_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *mockSetConfigurationContext_Set_Call) Return(_a0 error) *mockSetConfigurationContext_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockSetConfigurationContext_Set_Call) RunAndReturn(run func(string, string) error) *mockSetConfigurationContext_Set_Call {
	_c.Call.Return(run)
	return _c
}

// newMockSetConfigurationContext creates a new instance of mockSetConfigurationContext. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockSetConfigurationContext(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockSetConfigurationContext {
	mock := &mockSetConfigurationContext{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
