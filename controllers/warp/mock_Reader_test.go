// Code generated by mockery v2.20.0. DO NOT EDIT.

package warp

import (
	config "github.com/cloudogu/k8s-service-discovery/controllers/config"
	mock "github.com/stretchr/testify/mock"

	types "github.com/cloudogu/k8s-service-discovery/controllers/warp/types"
)

// MockReader is an autogenerated mock type for the Reader type
type MockReader struct {
	mock.Mock
}

type MockReader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockReader) EXPECT() *MockReader_Expecter {
	return &MockReader_Expecter{mock: &_m.Mock}
}

// Read provides a mock function with given fields: configuration
func (_m *MockReader) Read(configuration *config.Configuration) (types.Categories, error) {
	ret := _m.Called(configuration)

	var r0 types.Categories
	var r1 error
	if rf, ok := ret.Get(0).(func(*config.Configuration) (types.Categories, error)); ok {
		return rf(configuration)
	}
	if rf, ok := ret.Get(0).(func(*config.Configuration) types.Categories); ok {
		r0 = rf(configuration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Categories)
		}
	}

	if rf, ok := ret.Get(1).(func(*config.Configuration) error); ok {
		r1 = rf(configuration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockReader_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type MockReader_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - configuration *config.Configuration
func (_e *MockReader_Expecter) Read(configuration interface{}) *MockReader_Read_Call {
	return &MockReader_Read_Call{Call: _e.mock.On("Read", configuration)}
}

func (_c *MockReader_Read_Call) Run(run func(configuration *config.Configuration)) *MockReader_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*config.Configuration))
	})
	return _c
}

func (_c *MockReader_Read_Call) Return(_a0 types.Categories, _a1 error) *MockReader_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockReader_Read_Call) RunAndReturn(run func(*config.Configuration) (types.Categories, error)) *MockReader_Read_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockReader interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockReader creates a new instance of MockReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockReader(t mockConstructorTestingTNewMockReader) *MockReader {
	mock := &MockReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
