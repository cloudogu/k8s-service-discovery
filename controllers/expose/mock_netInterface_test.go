// Code generated by mockery v2.20.0. DO NOT EDIT.

package expose

import (
	mock "github.com/stretchr/testify/mock"
	rest "k8s.io/client-go/rest"

	v1 "k8s.io/client-go/kubernetes/typed/networking/v1"
)

// mockNetInterface is an autogenerated mock type for the netInterface type
type mockNetInterface struct {
	mock.Mock
}

type mockNetInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *mockNetInterface) EXPECT() *mockNetInterface_Expecter {
	return &mockNetInterface_Expecter{mock: &_m.Mock}
}

// IngressClasses provides a mock function with given fields:
func (_m *mockNetInterface) IngressClasses() v1.IngressClassInterface {
	ret := _m.Called()

	var r0 v1.IngressClassInterface
	if rf, ok := ret.Get(0).(func() v1.IngressClassInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1.IngressClassInterface)
		}
	}

	return r0
}

// mockNetInterface_IngressClasses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IngressClasses'
type mockNetInterface_IngressClasses_Call struct {
	*mock.Call
}

// IngressClasses is a helper method to define mock.On call
func (_e *mockNetInterface_Expecter) IngressClasses() *mockNetInterface_IngressClasses_Call {
	return &mockNetInterface_IngressClasses_Call{Call: _e.mock.On("IngressClasses")}
}

func (_c *mockNetInterface_IngressClasses_Call) Run(run func()) *mockNetInterface_IngressClasses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockNetInterface_IngressClasses_Call) Return(_a0 v1.IngressClassInterface) *mockNetInterface_IngressClasses_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockNetInterface_IngressClasses_Call) RunAndReturn(run func() v1.IngressClassInterface) *mockNetInterface_IngressClasses_Call {
	_c.Call.Return(run)
	return _c
}

// Ingresses provides a mock function with given fields: namespace
func (_m *mockNetInterface) Ingresses(namespace string) v1.IngressInterface {
	ret := _m.Called(namespace)

	var r0 v1.IngressInterface
	if rf, ok := ret.Get(0).(func(string) v1.IngressInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1.IngressInterface)
		}
	}

	return r0
}

// mockNetInterface_Ingresses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ingresses'
type mockNetInterface_Ingresses_Call struct {
	*mock.Call
}

// Ingresses is a helper method to define mock.On call
//   - namespace string
func (_e *mockNetInterface_Expecter) Ingresses(namespace interface{}) *mockNetInterface_Ingresses_Call {
	return &mockNetInterface_Ingresses_Call{Call: _e.mock.On("Ingresses", namespace)}
}

func (_c *mockNetInterface_Ingresses_Call) Run(run func(namespace string)) *mockNetInterface_Ingresses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockNetInterface_Ingresses_Call) Return(_a0 v1.IngressInterface) *mockNetInterface_Ingresses_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockNetInterface_Ingresses_Call) RunAndReturn(run func(string) v1.IngressInterface) *mockNetInterface_Ingresses_Call {
	_c.Call.Return(run)
	return _c
}

// NetworkPolicies provides a mock function with given fields: namespace
func (_m *mockNetInterface) NetworkPolicies(namespace string) v1.NetworkPolicyInterface {
	ret := _m.Called(namespace)

	var r0 v1.NetworkPolicyInterface
	if rf, ok := ret.Get(0).(func(string) v1.NetworkPolicyInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1.NetworkPolicyInterface)
		}
	}

	return r0
}

// mockNetInterface_NetworkPolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NetworkPolicies'
type mockNetInterface_NetworkPolicies_Call struct {
	*mock.Call
}

// NetworkPolicies is a helper method to define mock.On call
//   - namespace string
func (_e *mockNetInterface_Expecter) NetworkPolicies(namespace interface{}) *mockNetInterface_NetworkPolicies_Call {
	return &mockNetInterface_NetworkPolicies_Call{Call: _e.mock.On("NetworkPolicies", namespace)}
}

func (_c *mockNetInterface_NetworkPolicies_Call) Run(run func(namespace string)) *mockNetInterface_NetworkPolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockNetInterface_NetworkPolicies_Call) Return(_a0 v1.NetworkPolicyInterface) *mockNetInterface_NetworkPolicies_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockNetInterface_NetworkPolicies_Call) RunAndReturn(run func(string) v1.NetworkPolicyInterface) *mockNetInterface_NetworkPolicies_Call {
	_c.Call.Return(run)
	return _c
}

// RESTClient provides a mock function with given fields:
func (_m *mockNetInterface) RESTClient() rest.Interface {
	ret := _m.Called()

	var r0 rest.Interface
	if rf, ok := ret.Get(0).(func() rest.Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rest.Interface)
		}
	}

	return r0
}

// mockNetInterface_RESTClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RESTClient'
type mockNetInterface_RESTClient_Call struct {
	*mock.Call
}

// RESTClient is a helper method to define mock.On call
func (_e *mockNetInterface_Expecter) RESTClient() *mockNetInterface_RESTClient_Call {
	return &mockNetInterface_RESTClient_Call{Call: _e.mock.On("RESTClient")}
}

func (_c *mockNetInterface_RESTClient_Call) Run(run func()) *mockNetInterface_RESTClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockNetInterface_RESTClient_Call) Return(_a0 rest.Interface) *mockNetInterface_RESTClient_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockNetInterface_RESTClient_Call) RunAndReturn(run func() rest.Interface) *mockNetInterface_RESTClient_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTnewMockNetInterface interface {
	mock.TestingT
	Cleanup(func())
}

// newMockNetInterface creates a new instance of mockNetInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockNetInterface(t mockConstructorTestingTnewMockNetInterface) *mockNetInterface {
	mock := &mockNetInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
