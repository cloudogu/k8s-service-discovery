// Code generated by mockery v2.52.4. DO NOT EDIT.

package warp

import (
	core "github.com/cloudogu/cesapp-lib/core"
	mock "github.com/stretchr/testify/mock"

	types "github.com/cloudogu/k8s-service-discovery/v2/controllers/warp/types"
)

// MockDoguConverter is an autogenerated mock type for the DoguConverter type
type MockDoguConverter struct {
	mock.Mock
}

type MockDoguConverter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDoguConverter) EXPECT() *MockDoguConverter_Expecter {
	return &MockDoguConverter_Expecter{mock: &_m.Mock}
}

// CreateEntryWithCategoryFromDogu provides a mock function with given fields: dogu, tag
func (_m *MockDoguConverter) CreateEntryWithCategoryFromDogu(dogu *core.Dogu, tag string) (types.EntryWithCategory, error) {
	ret := _m.Called(dogu, tag)

	if len(ret) == 0 {
		panic("no return value specified for CreateEntryWithCategoryFromDogu")
	}

	var r0 types.EntryWithCategory
	var r1 error
	if rf, ok := ret.Get(0).(func(*core.Dogu, string) (types.EntryWithCategory, error)); ok {
		return rf(dogu, tag)
	}
	if rf, ok := ret.Get(0).(func(*core.Dogu, string) types.EntryWithCategory); ok {
		r0 = rf(dogu, tag)
	} else {
		r0 = ret.Get(0).(types.EntryWithCategory)
	}

	if rf, ok := ret.Get(1).(func(*core.Dogu, string) error); ok {
		r1 = rf(dogu, tag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDoguConverter_CreateEntryWithCategoryFromDogu_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateEntryWithCategoryFromDogu'
type MockDoguConverter_CreateEntryWithCategoryFromDogu_Call struct {
	*mock.Call
}

// CreateEntryWithCategoryFromDogu is a helper method to define mock.On call
//   - dogu *core.Dogu
//   - tag string
func (_e *MockDoguConverter_Expecter) CreateEntryWithCategoryFromDogu(dogu interface{}, tag interface{}) *MockDoguConverter_CreateEntryWithCategoryFromDogu_Call {
	return &MockDoguConverter_CreateEntryWithCategoryFromDogu_Call{Call: _e.mock.On("CreateEntryWithCategoryFromDogu", dogu, tag)}
}

func (_c *MockDoguConverter_CreateEntryWithCategoryFromDogu_Call) Run(run func(dogu *core.Dogu, tag string)) *MockDoguConverter_CreateEntryWithCategoryFromDogu_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*core.Dogu), args[1].(string))
	})
	return _c
}

func (_c *MockDoguConverter_CreateEntryWithCategoryFromDogu_Call) Return(_a0 types.EntryWithCategory, _a1 error) *MockDoguConverter_CreateEntryWithCategoryFromDogu_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDoguConverter_CreateEntryWithCategoryFromDogu_Call) RunAndReturn(run func(*core.Dogu, string) (types.EntryWithCategory, error)) *MockDoguConverter_CreateEntryWithCategoryFromDogu_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDoguConverter creates a new instance of MockDoguConverter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDoguConverter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDoguConverter {
	mock := &MockDoguConverter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
