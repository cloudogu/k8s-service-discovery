// Code generated by mockery v2.52.4. DO NOT EDIT.

package ingressController

import (
	context "context"

	types "github.com/cloudogu/k8s-service-discovery/v2/internal/types"
	mock "github.com/stretchr/testify/mock"

	util "github.com/cloudogu/k8s-service-discovery/v2/controllers/util"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// MockIngressController is an autogenerated mock type for the IngressController type
type MockIngressController struct {
	mock.Mock
}

type MockIngressController_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIngressController) EXPECT() *MockIngressController_Expecter {
	return &MockIngressController_Expecter{mock: &_m.Mock}
}

// DeleteExposedPorts provides a mock function with given fields: ctx, namespace, targetServiceName
func (_m *MockIngressController) DeleteExposedPorts(ctx context.Context, namespace string, targetServiceName string) error {
	ret := _m.Called(ctx, namespace, targetServiceName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteExposedPorts")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, namespace, targetServiceName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIngressController_DeleteExposedPorts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteExposedPorts'
type MockIngressController_DeleteExposedPorts_Call struct {
	*mock.Call
}

// DeleteExposedPorts is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - targetServiceName string
func (_e *MockIngressController_Expecter) DeleteExposedPorts(ctx interface{}, namespace interface{}, targetServiceName interface{}) *MockIngressController_DeleteExposedPorts_Call {
	return &MockIngressController_DeleteExposedPorts_Call{Call: _e.mock.On("DeleteExposedPorts", ctx, namespace, targetServiceName)}
}

func (_c *MockIngressController_DeleteExposedPorts_Call) Run(run func(ctx context.Context, namespace string, targetServiceName string)) *MockIngressController_DeleteExposedPorts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockIngressController_DeleteExposedPorts_Call) Return(_a0 error) *MockIngressController_DeleteExposedPorts_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIngressController_DeleteExposedPorts_Call) RunAndReturn(run func(context.Context, string, string) error) *MockIngressController_DeleteExposedPorts_Call {
	_c.Call.Return(run)
	return _c
}

// ExposeOrUpdateExposedPorts provides a mock function with given fields: ctx, namespace, targetServiceName, exposedPorts
func (_m *MockIngressController) ExposeOrUpdateExposedPorts(ctx context.Context, namespace string, targetServiceName string, exposedPorts util.ExposedPorts) error {
	ret := _m.Called(ctx, namespace, targetServiceName, exposedPorts)

	if len(ret) == 0 {
		panic("no return value specified for ExposeOrUpdateExposedPorts")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, util.ExposedPorts) error); ok {
		r0 = rf(ctx, namespace, targetServiceName, exposedPorts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIngressController_ExposeOrUpdateExposedPorts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExposeOrUpdateExposedPorts'
type MockIngressController_ExposeOrUpdateExposedPorts_Call struct {
	*mock.Call
}

// ExposeOrUpdateExposedPorts is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - targetServiceName string
//   - exposedPorts util.ExposedPorts
func (_e *MockIngressController_Expecter) ExposeOrUpdateExposedPorts(ctx interface{}, namespace interface{}, targetServiceName interface{}, exposedPorts interface{}) *MockIngressController_ExposeOrUpdateExposedPorts_Call {
	return &MockIngressController_ExposeOrUpdateExposedPorts_Call{Call: _e.mock.On("ExposeOrUpdateExposedPorts", ctx, namespace, targetServiceName, exposedPorts)}
}

func (_c *MockIngressController_ExposeOrUpdateExposedPorts_Call) Run(run func(ctx context.Context, namespace string, targetServiceName string, exposedPorts util.ExposedPorts)) *MockIngressController_ExposeOrUpdateExposedPorts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(util.ExposedPorts))
	})
	return _c
}

func (_c *MockIngressController_ExposeOrUpdateExposedPorts_Call) Return(_a0 error) *MockIngressController_ExposeOrUpdateExposedPorts_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIngressController_ExposeOrUpdateExposedPorts_Call) RunAndReturn(run func(context.Context, string, string, util.ExposedPorts) error) *MockIngressController_ExposeOrUpdateExposedPorts_Call {
	_c.Call.Return(run)
	return _c
}

// ExposePorts provides a mock function with given fields: ctx, namespace, exposedPorts, owner
func (_m *MockIngressController) ExposePorts(ctx context.Context, namespace string, exposedPorts types.ExposedPorts, owner *v1.OwnerReference) error {
	ret := _m.Called(ctx, namespace, exposedPorts, owner)

	if len(ret) == 0 {
		panic("no return value specified for ExposePorts")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, types.ExposedPorts, *v1.OwnerReference) error); ok {
		r0 = rf(ctx, namespace, exposedPorts, owner)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIngressController_ExposePorts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExposePorts'
type MockIngressController_ExposePorts_Call struct {
	*mock.Call
}

// ExposePorts is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - exposedPorts types.ExposedPorts
//   - owner *v1.OwnerReference
func (_e *MockIngressController_Expecter) ExposePorts(ctx interface{}, namespace interface{}, exposedPorts interface{}, owner interface{}) *MockIngressController_ExposePorts_Call {
	return &MockIngressController_ExposePorts_Call{Call: _e.mock.On("ExposePorts", ctx, namespace, exposedPorts, owner)}
}

func (_c *MockIngressController_ExposePorts_Call) Run(run func(ctx context.Context, namespace string, exposedPorts types.ExposedPorts, owner *v1.OwnerReference)) *MockIngressController_ExposePorts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(types.ExposedPorts), args[3].(*v1.OwnerReference))
	})
	return _c
}

func (_c *MockIngressController_ExposePorts_Call) Return(_a0 error) *MockIngressController_ExposePorts_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIngressController_ExposePorts_Call) RunAndReturn(run func(context.Context, string, types.ExposedPorts, *v1.OwnerReference) error) *MockIngressController_ExposePorts_Call {
	_c.Call.Return(run)
	return _c
}

// GetControllerSpec provides a mock function with no fields
func (_m *MockIngressController) GetControllerSpec() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetControllerSpec")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockIngressController_GetControllerSpec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetControllerSpec'
type MockIngressController_GetControllerSpec_Call struct {
	*mock.Call
}

// GetControllerSpec is a helper method to define mock.On call
func (_e *MockIngressController_Expecter) GetControllerSpec() *MockIngressController_GetControllerSpec_Call {
	return &MockIngressController_GetControllerSpec_Call{Call: _e.mock.On("GetControllerSpec")}
}

func (_c *MockIngressController_GetControllerSpec_Call) Run(run func()) *MockIngressController_GetControllerSpec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIngressController_GetControllerSpec_Call) Return(_a0 string) *MockIngressController_GetControllerSpec_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIngressController_GetControllerSpec_Call) RunAndReturn(run func() string) *MockIngressController_GetControllerSpec_Call {
	_c.Call.Return(run)
	return _c
}

// GetName provides a mock function with no fields
func (_m *MockIngressController) GetName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockIngressController_GetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetName'
type MockIngressController_GetName_Call struct {
	*mock.Call
}

// GetName is a helper method to define mock.On call
func (_e *MockIngressController_Expecter) GetName() *MockIngressController_GetName_Call {
	return &MockIngressController_GetName_Call{Call: _e.mock.On("GetName")}
}

func (_c *MockIngressController_GetName_Call) Run(run func()) *MockIngressController_GetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIngressController_GetName_Call) Return(_a0 string) *MockIngressController_GetName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIngressController_GetName_Call) RunAndReturn(run func() string) *MockIngressController_GetName_Call {
	_c.Call.Return(run)
	return _c
}

// GetRewriteAnnotationKey provides a mock function with no fields
func (_m *MockIngressController) GetRewriteAnnotationKey() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRewriteAnnotationKey")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockIngressController_GetRewriteAnnotationKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRewriteAnnotationKey'
type MockIngressController_GetRewriteAnnotationKey_Call struct {
	*mock.Call
}

// GetRewriteAnnotationKey is a helper method to define mock.On call
func (_e *MockIngressController_Expecter) GetRewriteAnnotationKey() *MockIngressController_GetRewriteAnnotationKey_Call {
	return &MockIngressController_GetRewriteAnnotationKey_Call{Call: _e.mock.On("GetRewriteAnnotationKey")}
}

func (_c *MockIngressController_GetRewriteAnnotationKey_Call) Run(run func()) *MockIngressController_GetRewriteAnnotationKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIngressController_GetRewriteAnnotationKey_Call) Return(_a0 string) *MockIngressController_GetRewriteAnnotationKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIngressController_GetRewriteAnnotationKey_Call) RunAndReturn(run func() string) *MockIngressController_GetRewriteAnnotationKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetSelector provides a mock function with no fields
func (_m *MockIngressController) GetSelector() map[string]string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSelector")
	}

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// MockIngressController_GetSelector_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSelector'
type MockIngressController_GetSelector_Call struct {
	*mock.Call
}

// GetSelector is a helper method to define mock.On call
func (_e *MockIngressController_Expecter) GetSelector() *MockIngressController_GetSelector_Call {
	return &MockIngressController_GetSelector_Call{Call: _e.mock.On("GetSelector")}
}

func (_c *MockIngressController_GetSelector_Call) Run(run func()) *MockIngressController_GetSelector_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIngressController_GetSelector_Call) Return(_a0 map[string]string) *MockIngressController_GetSelector_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIngressController_GetSelector_Call) RunAndReturn(run func() map[string]string) *MockIngressController_GetSelector_Call {
	_c.Call.Return(run)
	return _c
}

// GetUseRegexKey provides a mock function with no fields
func (_m *MockIngressController) GetUseRegexKey() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUseRegexKey")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockIngressController_GetUseRegexKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUseRegexKey'
type MockIngressController_GetUseRegexKey_Call struct {
	*mock.Call
}

// GetUseRegexKey is a helper method to define mock.On call
func (_e *MockIngressController_Expecter) GetUseRegexKey() *MockIngressController_GetUseRegexKey_Call {
	return &MockIngressController_GetUseRegexKey_Call{Call: _e.mock.On("GetUseRegexKey")}
}

func (_c *MockIngressController_GetUseRegexKey_Call) Run(run func()) *MockIngressController_GetUseRegexKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIngressController_GetUseRegexKey_Call) Return(_a0 string) *MockIngressController_GetUseRegexKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIngressController_GetUseRegexKey_Call) RunAndReturn(run func() string) *MockIngressController_GetUseRegexKey_Call {
	_c.Call.Return(run)
	return _c
}

// RedirectAlternativeFQDN provides a mock function with given fields: ctx, namespace, redirectObjectName, fqdn, altFQDNList, setOwner
func (_m *MockIngressController) RedirectAlternativeFQDN(ctx context.Context, namespace string, redirectObjectName string, fqdn string, altFQDNList []types.AlternativeFQDN, setOwner func(v1.Object) error) error {
	ret := _m.Called(ctx, namespace, redirectObjectName, fqdn, altFQDNList, setOwner)

	if len(ret) == 0 {
		panic("no return value specified for RedirectAlternativeFQDN")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []types.AlternativeFQDN, func(v1.Object) error) error); ok {
		r0 = rf(ctx, namespace, redirectObjectName, fqdn, altFQDNList, setOwner)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIngressController_RedirectAlternativeFQDN_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RedirectAlternativeFQDN'
type MockIngressController_RedirectAlternativeFQDN_Call struct {
	*mock.Call
}

// RedirectAlternativeFQDN is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - redirectObjectName string
//   - fqdn string
//   - altFQDNList []types.AlternativeFQDN
//   - setOwner func(v1.Object) error
func (_e *MockIngressController_Expecter) RedirectAlternativeFQDN(ctx interface{}, namespace interface{}, redirectObjectName interface{}, fqdn interface{}, altFQDNList interface{}, setOwner interface{}) *MockIngressController_RedirectAlternativeFQDN_Call {
	return &MockIngressController_RedirectAlternativeFQDN_Call{Call: _e.mock.On("RedirectAlternativeFQDN", ctx, namespace, redirectObjectName, fqdn, altFQDNList, setOwner)}
}

func (_c *MockIngressController_RedirectAlternativeFQDN_Call) Run(run func(ctx context.Context, namespace string, redirectObjectName string, fqdn string, altFQDNList []types.AlternativeFQDN, setOwner func(v1.Object) error)) *MockIngressController_RedirectAlternativeFQDN_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].([]types.AlternativeFQDN), args[5].(func(v1.Object) error))
	})
	return _c
}

func (_c *MockIngressController_RedirectAlternativeFQDN_Call) Return(_a0 error) *MockIngressController_RedirectAlternativeFQDN_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIngressController_RedirectAlternativeFQDN_Call) RunAndReturn(run func(context.Context, string, string, string, []types.AlternativeFQDN, func(v1.Object) error) error) *MockIngressController_RedirectAlternativeFQDN_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIngressController creates a new instance of MockIngressController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIngressController(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIngressController {
	mock := &MockIngressController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
