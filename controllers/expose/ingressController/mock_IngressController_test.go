// Code generated by mockery v2.44.1. DO NOT EDIT.

package ingressController

import mock "github.com/stretchr/testify/mock"

// MockIngressController is an autogenerated mock type for the IngressController type
type MockIngressController struct {
	mock.Mock
}

type MockIngressController_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIngressController) EXPECT() *MockIngressController_Expecter {
	return &MockIngressController_Expecter{mock: &_m.Mock}
}

// GetAdditionalConfigurationKey provides a mock function with given fields:
func (_m *MockIngressController) GetAdditionalConfigurationKey() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAdditionalConfigurationKey")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockIngressController_GetAdditionalConfigurationKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAdditionalConfigurationKey'
type MockIngressController_GetAdditionalConfigurationKey_Call struct {
	*mock.Call
}

// GetAdditionalConfigurationKey is a helper method to define mock.On call
func (_e *MockIngressController_Expecter) GetAdditionalConfigurationKey() *MockIngressController_GetAdditionalConfigurationKey_Call {
	return &MockIngressController_GetAdditionalConfigurationKey_Call{Call: _e.mock.On("GetAdditionalConfigurationKey")}
}

func (_c *MockIngressController_GetAdditionalConfigurationKey_Call) Run(run func()) *MockIngressController_GetAdditionalConfigurationKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIngressController_GetAdditionalConfigurationKey_Call) Return(_a0 string) *MockIngressController_GetAdditionalConfigurationKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIngressController_GetAdditionalConfigurationKey_Call) RunAndReturn(run func() string) *MockIngressController_GetAdditionalConfigurationKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetControllerSpec provides a mock function with given fields:
func (_m *MockIngressController) GetControllerSpec() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetControllerSpec")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockIngressController_GetControllerSpec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetControllerSpec'
type MockIngressController_GetControllerSpec_Call struct {
	*mock.Call
}

// GetControllerSpec is a helper method to define mock.On call
func (_e *MockIngressController_Expecter) GetControllerSpec() *MockIngressController_GetControllerSpec_Call {
	return &MockIngressController_GetControllerSpec_Call{Call: _e.mock.On("GetControllerSpec")}
}

func (_c *MockIngressController_GetControllerSpec_Call) Run(run func()) *MockIngressController_GetControllerSpec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIngressController_GetControllerSpec_Call) Return(_a0 string) *MockIngressController_GetControllerSpec_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIngressController_GetControllerSpec_Call) RunAndReturn(run func() string) *MockIngressController_GetControllerSpec_Call {
	_c.Call.Return(run)
	return _c
}

// GetRewriteAnnotationKey provides a mock function with given fields:
func (_m *MockIngressController) GetRewriteAnnotationKey() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRewriteAnnotationKey")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockIngressController_GetRewriteAnnotationKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRewriteAnnotationKey'
type MockIngressController_GetRewriteAnnotationKey_Call struct {
	*mock.Call
}

// GetRewriteAnnotationKey is a helper method to define mock.On call
func (_e *MockIngressController_Expecter) GetRewriteAnnotationKey() *MockIngressController_GetRewriteAnnotationKey_Call {
	return &MockIngressController_GetRewriteAnnotationKey_Call{Call: _e.mock.On("GetRewriteAnnotationKey")}
}

func (_c *MockIngressController_GetRewriteAnnotationKey_Call) Run(run func()) *MockIngressController_GetRewriteAnnotationKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIngressController_GetRewriteAnnotationKey_Call) Return(_a0 string) *MockIngressController_GetRewriteAnnotationKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIngressController_GetRewriteAnnotationKey_Call) RunAndReturn(run func() string) *MockIngressController_GetRewriteAnnotationKey_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIngressController creates a new instance of MockIngressController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIngressController(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIngressController {
	mock := &MockIngressController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
